// <auto-generated />
using System;
using System.Net;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;
using UncoreMetrics.Data;

#nullable disable

namespace UncoreMetrics.Data.Migrations
{
    [DbContext(typeof(GenericServersContext))]
    [Migration("20220716032004_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UncoreMetrics.Data.GenericServer", b =>
                {
                    b.Property<byte[]>("IpAddressBytes")
                        .HasMaxLength(16)
                        .HasColumnType("bytea");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<long?>("ASN")
                        .HasColumnType("bigint");

                    b.Property<IPAddress>("Address")
                        .IsRequired()
                        .HasColumnType("inet");

                    b.Property<long>("AppID")
                        .HasColumnType("bigint");

                    b.Property<string>("Continent")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("FoundAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Game")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ISP")
                        .HasColumnType("text");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastCheck")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LastCheckOnline")
                        .HasColumnType("boolean");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Players")
                        .HasColumnType("integer");

                    b.Property<int>("QueryPort")
                        .HasColumnType("integer");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<Guid>("ServerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Timezone")
                        .HasColumnType("text");

                    b.HasKey("IpAddressBytes", "Port");

                    b.HasIndex("AppID");

                    b.HasIndex("Continent");

                    b.HasIndex("IsOnline");

                    b.HasIndex("SearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.ToTable("Servers", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
