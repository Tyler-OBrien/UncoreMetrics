// <auto-generated />
using System;
using System.Collections.Generic;
using System.Net;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;
using UncoreMetrics.Data;

#nullable disable

namespace UncoreMetrics.Data.Migrations.ServerContext
{
    [DbContext(typeof(ServersContext))]
    partial class ServersContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UncoreMetrics.Data.Server", b =>
                {
                    b.Property<Guid>("ServerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long?>("ASN")
                        .HasColumnType("bigint");

                    b.Property<IPAddress>("Address")
                        .IsRequired()
                        .HasColumnType("inet");

                    b.Property<decimal>("AppID")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Continent")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<int>("FailedChecks")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FoundAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Game")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ISP")
                        .HasColumnType("text");

                    b.Property<byte[]>("IpAddressBytes")
                        .HasMaxLength(16)
                        .HasColumnType("bytea");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastCheck")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<long>("MaxPlayers")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("NextCheck")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Players")
                        .HasColumnType("bigint");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<int>("QueryPort")
                        .HasColumnType("integer");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<bool>("ServerDead")
                        .HasColumnType("boolean");

                    b.Property<string>("Timezone")
                        .HasColumnType("text");

                    b.HasKey("ServerID");

                    b.HasIndex("AppID");

                    b.HasIndex("Continent");

                    b.HasIndex("IsOnline");

                    b.HasIndex("NextCheck");

                    b.HasIndex("SearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SearchVector"), "GIN");

                    b.HasIndex("ServerDead");

                    b.ToTable("Servers", (string)null);
                });

            modelBuilder.Entity("UncoreMetrics.Data.GameData.ARK.ArkServer", b =>
                {
                    b.HasBaseType("UncoreMetrics.Data.Server");

                    b.Property<bool?>("Battleye")
                        .HasColumnType("boolean");

                    b.Property<string>("ClusterID")
                        .HasColumnType("text");

                    b.Property<string>("CustomServerName")
                        .HasColumnType("text");

                    b.Property<int?>("DaysRunning")
                        .HasColumnType("integer");

                    b.Property<bool?>("DownloadCharacters")
                        .HasColumnType("boolean");

                    b.Property<bool?>("DownloadItems")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Modded")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("Mods")
                        .HasColumnType("text[]");

                    b.Property<bool?>("OfficialServer")
                        .HasColumnType("boolean");

                    b.Property<bool?>("PVE")
                        .HasColumnType("boolean");

                    b.Property<bool?>("PasswordRequired")
                        .HasColumnType("boolean");

                    b.Property<int?>("SessionFlags")
                        .HasColumnType("integer");

                    b.HasIndex("Battleye");

                    b.HasIndex("PVE");

                    b.HasIndex("PasswordRequired");

                    b.ToTable("Ark_Servers", (string)null);
                });

            modelBuilder.Entity("UncoreMetrics.Data.GameData.VRising.VRisingServer", b =>
                {
                    b.HasBaseType("UncoreMetrics.Data.Server");

                    b.Property<bool?>("BloodBoundEquipment")
                        .HasColumnType("boolean");

                    b.Property<int?>("DaysRunning")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("HeartDamage")
                        .HasColumnType("integer");

                    b.HasIndex("BloodBoundEquipment");

                    b.HasIndex("HeartDamage");

                    b.ToTable("V_Rising_Servers", (string)null);
                });

            modelBuilder.Entity("UncoreMetrics.Data.GameData.ARK.ArkServer", b =>
                {
                    b.HasOne("UncoreMetrics.Data.Server", null)
                        .WithOne()
                        .HasForeignKey("UncoreMetrics.Data.GameData.ARK.ArkServer", "ServerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UncoreMetrics.Data.GameData.VRising.VRisingServer", b =>
                {
                    b.HasOne("UncoreMetrics.Data.Server", null)
                        .WithOne()
                        .HasForeignKey("UncoreMetrics.Data.GameData.VRising.VRisingServer", "ServerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
